"""
Model Version 4: Amplified Coverage by Door

Code associated with paper:
    "Developing Optimization Models with Cognitive Systems Engineering"
    By Tyler C. O'Brien, Emily L. Tucker, Steven Foster, and Sudeep Hegde
    Journal of the Operational Research Society


"""
from pyomo.environ import *
import pandas as pd
import numpy as np
import sys

# Model
model = ConcreteModel(name = 'V4_AmplifiedCoverage')


# Sets
model.B = Set(initialize=[0, 1,	2,	3,	4,	5,	6,	7,	8,	9,	10,	11,	12,	13,	14,	15,	16,	17,	18,	19,	20,	21,	22,	23,	24,	25,	26,	27,	28,	29,	30,	31,	32,	33,	34,35]) # Buildings
model.I = Set(initialize=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]) # Door indices

# Parameters

# Demand by door (April 2021)
l_times_d_hat = [[325,	206,	1613,	127,	13,	244,	3172,	373,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0],
     [1254,	2824,	999,	2292,	1,	2187,	1752,	3456,	742,	2109,	502,	1470,	125,	50,	791,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0],
     [1742,	1048,	183,	3139,	2893,	2967,	556,	154,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0],
     [6154,	572,	37,	23,	4848,	24,	72,	68,	4093,	208,	13,	25,	4,	74,	48,	102,	67,	3608,	1,	39,	4282,	8,	8,	0,	0,	0,	0,	0,	0],
     [922,	44,	171,	184,	4448,	2106,	1422,	76,	2740,	5528,	1164,	83,	4,	54,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0],
     [2884,	20,	2,	201,	10,	65,	345,	229,	1529,	386,	2318,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0],
     [40,	386,	21,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0],
     [2381,	731,	2458,	683,	565,	376,	155,	15,	9409,	455,	76,	4240,	3605,	3788,	757,	6798,	2192,	2382,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0],
     [691,	118,	5,	622,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0],
     [64,	103,	2158,	81,	1,	71,	56,	19,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0],
     [3138,	2009,	265,	235,	1329,	85,	8,	1,	38,	1952,	140,	169,	404,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0],
     [1823,	1406,	4278,	71,	182,	1722,	139,	2191,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0],
     [1851,	4177,	32,	83,	149,	386,	1265,	437,	41,	1,	763,	2210,	12,	130,	83,	476,	146,	1,	1,	74,	0,	0,	0,	0,	0,	0,	0,	0,	0],
     [5236,	179,	2075,	210,	1597,	403,	893,	3005,	12,	219,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0],
     [570,	2678,	128,	410,	4,	58,	174,	226,	25,	1099,	22,	59,	15,	327,	1101,	202,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0],
     [755,	930,	168,	1908,	20,	2,	548,	46,	1100,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0],
     [146,	96,	450,	48,	1598,	5,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0],
     [4711,	1084,	11,	31,	1219,	12,	925,	137,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0],
     [132,	1424,	239,	762,	1870,	241,	3686,	2155,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0],
     [393,	1337,	1166,	981,	251,	31,	2307,	762,	201,	411,	18,	1096,	7,	1148,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0],
     [2845,	1,	480,	187,	445,	803,	28,	1972,	51,	109,	10,	1058,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0],
     [932,	252,	251,	317,	3714,	140,	3110,	869,	134,	1273,	284,	85,	57,	3,	14,	32,	80,	71,	119,	737,	1246,	254,	44,	139,	128,	24,	105,	1269,	45],
     [433,	800,	1328,	3693,	1217,	399,	2061,	595,	222,	764,	4,	1276,	31,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0],
     [10,	2,	821,	3210,	1666,	588,	63,	404,	429,	1114,	17,	10,	3,	36,	2,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0],
     [359,	661,	595,	1945,	850,	1513,	631,	689,	644,	212,	723,	482,	375,	303,	781,	819,	1039,	16,	1250,	893,	536,	1507,	605,	0,	0,	0,	0,	0,	0],
     [2046,	606,	2151,	4,	50,	659,	83,	321,	211,	62,	596,	10,	32,	237,	22,	35,	142,	13,	79,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0],
     [97,	1739,	356,	4440,	31,	20,	10,	3134,	188,	1754,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0],
     [2148,	657,	14,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0],
     [1070,	4033,	1441,	3881,	3503,	175,	75,	7,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0],
     [820,	102,	3534,	4461,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0], 
     [1, 4469,	2,	5881,	11294,	15,	1068,	5,	1,	7465,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0],
     [1068,	1375,	1460,	5345,	795,	3875,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0],
     [1965,	4130,	815,	9,	56,	4440,	4138,	363,	256,	2070,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0],
     [2223,	35,	249,	120,	322,	121,	5691,	46,	12,	78,	6,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0],
     [633,	3469,	374,	218,	210,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0],
     [6684,	447,	4756,	1537,	1257,	549,	2481,	6,	264,	198,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0]]

ld_df = pd.DataFrame(data = l_times_d_hat, columns = model.I, index = model.B)
ld = ld_df.stack().to_dict() #convert to dictionary
model.ld = Param(model.B, model.I, initialize=ld)

# Assigned stations per building
s = [2,	1,	4,	4,	2,	2,	1,	20,	1,	2,	1,	2,	1,	3,	1,	3,	1,	1,	1,	2,	4,	6,	1,	1,	6,	2,	6,  1,	4,	2,	4,	3,	4,	1,	1,	1]

# Decision Variables
model.x = Var(model.B,model.I, within=NonNegativeIntegers)


# Objective Function
def ObjectiveFunction(model):
    return sum(model.x[b,i]*model.ld[b,i] for b in model.B for i in model.I)
model.obj = Objective(rule=ObjectiveFunction, sense = maximize)

# Constraints
def StationsPerBuilding(model, b):
    return sum(model.x[b,i] for i in model.I) == s[b]
model.con_StationsPerBuilding = Constraint(model.B, rule=StationsPerBuilding)

def NoMoreThanTwoDispPerDoor(model,b,i):
    return model.x[b,i] <= 2
model.con_NoMoreThanTwoDispPerDoor = Constraint(model.B, model.I,rule=NoMoreThanTwoDispPerDoor)


# Solve
solver = SolverFactory('gurobi')
solver.solve(model)
model.pprint()
print("Objective Value: " + str(value(model.obj)))

